devtools::load_all()
cc <- cedar.client(api.key = "59baba4f-cb34-49a6-89fb-76741faa4efd")
devtools::load_all()
cc <- cedar.client(api.key = "59baba4f-cb34-49a6-89fb-76741faa4efd")
cedar.search(cc, "community", ontologies = "ENVO")
devtools::load_all()
cedar.search(cc, "community", ontologies = "ENVO")
showMethods(cedar.search)
devtools::load_all()
showMethods(cedar.search)
cedar.search(cc, "community", ontologies = "ENVO")
?cedar.search.values
showMethods("log")
getGeneric("log")
?setMethod
getGeneric(GET)
getGeneric("GET")
getGeneric("httr::GET")
showMethods("httr::GET")
method.skeleton("cedar.search.values", "cedar.client", "R/setMethods.R")
devtools::load_all()
?methods::generic.skeleton
methods::generic.skeleton("cedar.search", function(
cedar.client,
query,
scope = "all",
as.list = TRUE,
ontologies = NA_character_,
suggest = FALSE,
page = 1,
pageSize = 50
) {
# Validity check
if(missing(cedar.client))
stop("No API client provided: see ?cedar.client.")
if(missing(query))
stop("No query provided.")
if(is.na(cedar.client@api.key))
stop("Invalid BioOntology API key. You can verifiy it in your account settings.")
# Request
.result <- GET(
"https://terminology.metadatacenter.org/bioportal/search?",
query = list(
q = query,
scope = scope,
sources = ontologies,
maxDepth = max.depth,
page = page,
page_size = page.size
),
add_headers(Authorization = paste("apiKey ", cedar.client@api.key)) #"apiKey 59baba4f-cb34-49a6-89fb-76741faa4efd")
)
# Output
return(.result)
}
)
#' @param suggest logical. Will perform a search specifically geared towards type-ahead suggestions
#' (defaults to FALSE).
# @param subtree_root_id character. Class identifier that limits the search to the branch rooted on that class.
# It must be URL encoded.
# @param source character. Ontology for which the subtree search will be performed.
# @param maxDepth integer. Subtree depth.
#' @param page integer. See cedar.client documentation. (defaults to `cedar.client@page`).
#' @param pageSize integer. See cedar.client documentation. (defaults to `cedar.client@pageSize`).
#'
#' @importFrom httr POST
cedar.search.values <- function(
cedar.client,
query,
scope = "all",
as.list = TRUE,
ontologies = NA_character_,
suggest = FALSE,
page = 1,
pageSize = 50
) {
# Validity check
if(missing(cedar.client))
stop("No API client provided: see ?cedar.client.")
if(missing(query))
stop("No query provided.")
if(is.na(cedar.client@api.key))
stop("Invalid BioOntology API key. You can verifiy it in your account settings.")
# Request
.result <- GET(
"https://terminology.metadatacenter.org/bioportal/search?",
query = list(
q = query,
scope = scope,
sources = ontologies,
maxDepth = max.depth,
page = page,
page_size = page.size
),
add_headers(Authorization = paste("apiKey ", cedar.client@api.key)) #"apiKey 59baba4f-cb34-49a6-89fb-76741faa4efd")
)
# Output
return(.result)
}
setGeneric(ccedar.search.values)
setGeneric("cedar.search.values")
?setGeneric
getGeneric("cedar.search.values")
devtools::load_all()
devtools::load_all()
?dotsMethods
cedar.search <- function(
cedar.client = new("cedar.client"),
...
) {
}
setGeneric("cedar.search")
?getGenerics
getGenerics()
getGeneric("cedar.search")
?dotsMethods
setGeneric("cedar.search", function(...) standardGeneric("cedar.search"))
getGeneric("cedar.search")
?setMethod
example(setMethod)
devtools::load_all()
?dotsMethods
setGeneric("cedar.search", function(...) standardGeneric("cedar.search"))
methods::method.skeleton("cedar.search", signature = c("cedar.client", "character"), "tmp.R")
methods::method.skeleton("cedar.search", signature = c("cedar.client"), "tmp.R")
setGeneric(
"cedar.search",
function(
cedar.client,
query,
scope,
as.list,
ontologies,
suggest,
max.depth,
page,
page.size
)
standardGeneric("cedar.search")
)
#' cedar.search.values
setMethod(
"cedar.search",
signature = c(
cedar.client = "cedar.client",
query = "character"
),
function (
cedar.client,
query,
scope = "all",
as.list = TRUE,
ontologies = NA_character_,
suggest = FALSE,
max.depth = 1,
page = 1,
page.size = 50
) {
# Validity check
if(missing(cedar.client))
stop("No API client provided: see ?cedar.client.")
if(missing(query))
stop("No query provided.")
if(is.na(cedar.client@api.key))
stop("Invalid BioOntology API key. You can verifiy it in your account settings.")
# Request
.result <- GET(
"https://terminology.metadatacenter.org/bioportal/search?",
query = list(
q = query,
scope = scope,
sources = ontologies,
maxDepth = max.depth,
page = page,
page_size = page.size
),
add_headers(Authorization = paste("apiKey ", cedar.client@api.key)) #"apiKey 59baba4f-cb34-49a6-89fb-76741faa4efd")
)
# Output
return(.result)
}
)
devtools::load_all()
cc <- BORAA::cedar.client(api.key = "59baba4f-cb34-49a6-89fb-76741faa4efd")
cc
cedar.search(cc, "community")
BORAA::cedar.search(cc, "community")
BORAA::cedar.search.values(cc, "community")
devtools::load_all()
rm(list = ls())
devtools::load_all()
devtools::load_all()
cc <- BORAA::cedar.client(api.key = "59baba4f-cb34-49a6-89fb-76741faa4efd")
BORAA::cedar.search.values(cc, "community")
BORAA::cedar.search.values(cc, "community")
devtools::load_all()
cc <- BORAA::cedar.client(api.key = "59baba4f-cb34-49a6-89fb-76741faa4efd")
BORAA::cedar.search.values(cc, "community")
?cedar.search.values
?cedar.search
?cedar.clinet
?cedar.client
devtools::document()
?cedar.search.values
?cedar.search-cedar.client-character-method
?`cedar.search-cedar.client-character-method`
cedar.search(cc, "community")
isS4(cedar.search)
devtools::load_all()
?`cedar.search-cedar.client-character-method`
?`Search in CEDAR`
?cedar.search
devtools::load_all()
?`cedar.search-cedar.client-character-method`
?`cedar.search-cedar.client-character-method`
?cedar.search
?cedar.search.values
devtools::load_all(); devtools::document()
?`cedar.search-cedar.client-character-method`
cc <- cedar.client(api.key = "59baba4f-cb34-49a6-89fb-76741faa4efd")
cedar.search(cc, "community")
devtools::load_all(); devtools::document()
cc <- cedar.client(api.key = "59baba4f-cb34-49a6-89fb-76741faa4efd")
cedar.search(cc, "community")
devtools::load_all(); devtools::document()
cc <- cedar.client(api.key = "59baba4f-cb34-49a6-89fb-76741faa4efd")
cedar.search(cc, "community")
devtools::load_all(); devtools::document()
cc <- cedar.client(api.key = "59baba4f-cb34-49a6-89fb-76741faa4efd")
cedar.search(cc, "community")
devtools::load_all(); devtools::document()
cc <- cedar.client(api.key = "59baba4f-cb34-49a6-89fb-76741faa4efd")
cedar.search(cc, "community")
?ls
!is.integer('a')
!is.integer('a') || 'a' < 1
devtools::load_all(); devtools::document()
cc <- cedar.client(api.key = "59baba4f-cb34-49a6-89fb-76741faa4efd")
cedar.search(cc, "community")
devtools::load_all(); devtools::document()
cc <- cedar.client(api.key = "59baba4f-cb34-49a6-89fb-76741faa4efd")
cedar.search(cc, "community")
page
is.integer(page)
page
typeof(page)
devtools::load_all(); devtools::document()
cc <- cedar.client(api.key = "59baba4f-cb34-49a6-89fb-76741faa4efd")
cedar.search(cc, "community")
devtools::load_all(); devtools::document()
cc <- cedar.client(api.key = "59baba4f-cb34-49a6-89fb-76741faa4efd")
res <- cedar.search(cc, "community")
res$content
devtools::load_all(); devtools::document()
cc <- cedar.client(api.key = "59baba4f-cb34-49a6-89fb-76741faa4efd")
res <- cedar.search(cc, "community")
res
devtools::load_all(); devtools::document()
cc <- cedar.client(api.key = "59baba4f-cb34-49a6-89fb-76741faa4efd")
res <- cedar.search(cc, "community")
devtools::load_all(); devtools::document()
cc <- cedar.client(api.key = "59baba4f-cb34-49a6-89fb-76741faa4efd")
res <- cedar.search(cc, "community")
devtools::load_all(); devtools::document()
cc <- cedar.client(api.key = "59baba4f-cb34-49a6-89fb-76741faa4efd")
res <- cedar.search(cc, "community")
res
res$content
res
typeof(res)
View(res)
res$content
jsonlite::fromJSON(res$content)
res.df <- jsonlite::fromJSON(res$content)
View(res.df)
res$content
res.df <- jsonlite::fromJSON(res)
res.df <- jsonlite::fromJSON(res$content)
res.json <- jsonlite::fromJSON(res$content)
View(res.json)
res.json[["collection"]]
View(res.json[["collection"]])
devtools::load_all(); devtools::document()
cc <- cedar.client(api.key = "59baba4f-cb34-49a6-89fb-76741faa4efd")
res <- cedar.search(cc, "community", ontologies = "ENVO")
devtools::load_all(); devtools::document()
cc <- cedar.client(api.key = "59baba4f-cb34-49a6-89fb-76741faa4efd")
res <- cedar.search(cc, "community", ontologies = "ENVO")
res.json <- jsonlite::fromJSON(res$content)
View(res.json$collection)
devtools::load_all()
devtools::load_all(); devtools::document()
