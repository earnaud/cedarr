devtools::load_all(); devtools::document()
res <- cedar.search(cedar.client = cc)
eval(args[[arg]])
ls()
args[[arg]]
class(res)
names(res)
res$request
class(res$request)
typeof(res$request)
res$times
res$date
class(res$date)
res$content
class(res$content)
names(res$content)
res$content$status
res$content$errorType
res$content$errorKey
res$content$errorReasonKey
res$content$message
res$content$parameters
res$content$entities
res$content$suggestedAction
res$content$originalException
names(res$content$originalException)
res$content$originalException$message
res$content$originalException$cause
res$content$originalException$stackTrace
res$content$originalException$errorPack
res$content$originalException$showFullStackTrace
res$content$sourceException
res$content$sourceException$message
res$content$sourceException$localizedMessage
res$content$sourceException$causes
res$content$sourceException$stackTrace
res$content$sourceException$op
res$content$operation
?GET
?response
vignette("roxygen2")
?cedar.search
?cedar.search
?cedar.search
?cedar.search
?cedar.search
?cedar.search
?cedar.search
?cedar.search
?cedar.search
# Query the CEDAR base: here, we are looking for terms related
# to "community" in ENVO
res <- cedar.search(
cedar.client = cc,
query = "community",
ontologies = "ENVO"
)
c
res$collection
typeof(res$collection)
names(res)
names(res$collection)
class(res$collection)
?cedar.search
?roxygen
?roxygen2
?cedarr
vignette(roxygen2)
vignette("roxygen2")
?cedar.search
vignette("roxygen2")
?cedar.search
cedar.search("a")
cc
cedar.search(cc, output.mode = "full")
arg
exists(arg)
exists(arg)
devtools::load_all(".")
cedar.search(cc, output.mode = "full")
as.list(match.call())[-1].
as.list(match.call())[-1]
match.call()
cedar.search(cc, "full")
devtools::load_all(".")
cedar.search(cc, "full")
as.list(match.call())[-1]
cedar.search(cc, output.mode = "full")
output.mode
match.call()
str(match.call())
names(match.call())
as.list(match.call())
?match.call
install.packages("CheckArgument")
install.packages("CheckArguments")
install.packages("ArgumentCheck")
devtools::load_all(".")
cc
cedar.search(cc, "community", ontologies = "ENVO")
devtools::load_all(".")
cedar.search(cc, "community", ontologies = "ENVO")
?cedar.search
cedar.search(cc, ontologies = "ENVO")
devtools::load_all(".")
cedar.search(cc, ontologies = "ENVO")
?cedar.search
?cedar.search
?cedar.search
?cedar.search
?cedar.search
?cedar.search
res$collection
res <- cedar.search(cc, ontologies = "ENVO")
res
. <- try()
.
.$id
.["id"]
"CEDARVS" %in% .["id"]
res
res["id"]
"CEDARVS" %in% res["id"]
"CEDARVS" %in% unlist(res["id"])
res <- cedar.search(cc, ontologies = "ENVOYE")
res
res <- cedar.search(cc, query = "TESTTESTTEST", ontologies = "ENVOYE")
res
res$content
res$status_code
res$url
res$request
res$handle
devtools::load_all(".")
devtools::load_all(".")
?cedar.search
?cedar.search
res <- cedar.search(
cedar.client = cc,
vs_collection = "CEDARVS"
)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
res <- cedar.search(
cedar.client = cc,
vs_collection = "CEDARVS"
)
res$collection
View(res$collection)
?cedar.search
devtools::load_all(".")
cedar.search(cc, vs_collection = "CEDARVS", vs_id = "803d8340-6a1e-0138-64d8-005056010073")
res <- cedar.search(cc, vs_collection = "CEDARVS", vs_id = "803d8340-6a1e-0138-64d8-005056010073")
View(res$collection)
res <- cedar.search(cc, vs_collection = "CEDARVS", vs_id = "803d8340-6a1e-0138-64d8-005056010073")
View(res$collection)
res$collection
res <- cedar.search(cc, vs_collection = "CEDARVS", vs_id = "803d8340-6a1e-0138-64d8-005056010073")
View(res$collection)
devtools::load_all(".")
res <- cedar.search(cc, vs_collection = "CEDARVS", vs_id = "803d8340-6a1e-0138-64d8-005056010073")
View(res$collection)
res
View(res)
View(as.data.frame(res))
View(as.data.frame(res))
res <- GET("r note "expanding the signature to include omitted arguments in definition: ="missing""")
res <- GET("https://terminology.metadatacenter.org/bioportal/vs-collections/CEDARVS/values/803d8340-6a1e-0138-64d8-005056010073/value-set",
add_headers(Authorization = paste("apiKey", cc@api.key)))
devtools::load_all(".")
cc <- cedar.client(api.key = "8fe5be450c83f1db53a91fe97b64cb87bff3e46aa382e658a3c85fe32cf3c5bc")
res <- GET("https://terminology.metadatacenter.org/bioportal/vs-collections/CEDARVS/values/803d8340-6a1e-0138-64d8-005056010073/value-set",
add_headers(Authorization = paste("apiKey", cc@api.key)))
res
res$content
res$content %>% rawToChar()
res$content %>% rawToChar() %>% fromJSON()
res$content %>% rawToChar() %>% fromJSON() %>% View
res$content %>% rawToChar() %>% fromJSON(); View(res)
res$content %>% rawToChar() %>% write_json(path = "log_20200514_0931.json")
res$content %>% rawToChar() %>% jsonlite::write_json(path = "log_20200514_0931.json")
rawToChar("a")
sapply(c(cc,aa) function(x) print(x@api.key))
sapply(c(cc,aa), function(x) print(x@api.key))
try(sapply(c(cc,aa), function(x) print(x@api.key)), silent = TRUE)
res <- cedar.search(
cedar.client = cc,
query = "community",
ontologies = "ENVO"
)
res$collection
View(res$collection)
res <- cedar.search(
cedar.client = cc
)
# Access the result of the query
View(res)
res <- cedar.search(
cedar.client = cc,
vs_collection = "CEDARVS"
)
res <- cedar.search(
cedar.client = cc,
vs_collection = "CEDARVS"
)
ls()
content
content.result$content
content.result$content %>% rawToChar()
devtools::load_all(".")
res <- cedar.search(
cedar.client = cc,
vs_collection = "CEDARVS"
)
devtools::load_all(".")
res <- cedar.search(
cedar.client = cc,
vs_collection = "CEDARVS"
)
devtools::load_all(".")
res <- cedar.search(
cedar.client = cc,
vs_collection = "CEDARVS"
)
.vsc.list
.vsc.list %>% rawToChar()
.vsc.list %>% rawToChar() %>% fromJSON()
devtools::load_all(".")
res <- cedar.search(
cedar.client = cc,
vs_collection = "CEDARVS"
)
.vsc.list
res <- cedar.search(
cedar.client = cc,
vs_collection = "CEDARVS"
)
devtools::load_all(".")
res <- cedar.search(
cedar.client = cc,
vs_collection = "CEDARVS"
)
devtools::load_all(".")
res <- cedar.search(
cedar.client = cc,
vs_collection = "CEDARVS"
)
res <- cedar.search(
cedar.client = cc,
vs_collection = "CEDARVS"
)
devtools::load_all(".")
res <- cedar.search(
cedar.client = cc,
vs_collection = "CEDARVS"
)
vs_id
?cedar.search
res <- cedar.search(
cedar.client = cc,
vs_collection = "CEDARVS",
vs_id = "803d8340-6a1e-0138-64d8-005056010073"
)
View(res)
res <- cedar.search(
cedar.client = cc,
vs_collection = "CEDARVS"
)
devtools::load_all(".")
View(res)
View(res[["collection"]])
res <- cedar.search(
cedar.client = cc,
vs_collection = "CEDARVS",
vs_id = "803d8340-6a1e-0138-64d8-005056010073"
)
49*pi
49*pi/8
49*pi/8 > 36*pi/6
49*pi/8; 36*pi/6
49*pi/8/1.70; 36*pi/6/1.50
49*pi/8/1.70 > 36*pi/6/1.50
formals(cedar.search)
CEDAR <- list()
is.character(NA_character_)
#' A concept in the domain of the ontology. Used within BioPortal, class is a synonym for
#'  term or concept. Term is the preferred BioPortal label.
#'
#' @slot apikey  An API Key is required to access any API call. It is used within BORAA
#' methods as #' a header for http requests. An API key is linked to a CEDAR account (\url{cedar.metadatacenter.org}).
#'
#' @export
setClass(
Class = "cedar.class",
slots = c(
id = "character",
tree = "ANY",
children = "ANY",
descendants = "ANY",
parents = "ANY"
),
prototype = prototype(
id = NA_character_
),
validity = function(object){
errors <- character()
if(!is(object@id, "character") ||
object@id == "" ||
length(object@id) == 0)
errors <- c(errors, "`id` slot shall be filled with the id for this class.")
#TODO add a cedar.search to check for class validity
if(length(errors) == 0) TRUE else errors
}
)
`named list()`
list("a") %>% attr(., "names") <- "e"
list("a") %>% (attr(., "names") <- "e")
?setAs
class("NA")
class(NA)
devtools::load_all(".")
devtools::load_all(".")
?cedar.search.values
?signature
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
?cedar.search.ontologies
devtools::load_all(".")
?cedar.search
?cedar.search.values
?cedar.search.ontologies
devtools::load_all(".")
?cedar.search.ontologies
devtools::load_all(".")
?cedar.search.ontologies
cc
my.api.key <- "8fe5be450c83f1db53a91fe97b64cb87bff3e46aa382e658a3c85fe32cf3c5bc"
cc <- cedar.client(api.key = my.api.key)
?cedar.search
?cedar.search.ontologies
# ----------------------------------
## 2 - fetch ontologies
res <- cedar.search.ontologies(
cedar.client = cc
)
res$details
View(res$details)
devtools::load_all(".")
devtools::load_all(".")
is("1", "ANY")
?is
class("ANY")
devtools::load_all(".")
devtools::load_all(".")
?cedar.search.ontologies
?cedar.search.ontologies
cc
res <- cedar.search.ontologies(
cedar.client = cc,
source = "ENVO"
)
View(res)
devtools::load_all(".")
?cedar.search.ontologies
?cedar.search.values
?cedar.search.ontologies
devtools::load_all(".")
?cedar.search.values
my.api.key <- "8fe5be450c83f1db53a91fe97b64cb87bff3e46aa382e658a3c85fe32cf3c5bc"
cc <- cedar.client(api.key = my.api.key)
cedar.search.values(cc, source = "CEDARVS")
source('~/Softwares/Gits/cedarr/R/cedar.search.values.R')
devtools::load_all(".")
devtools::load_all(".")
cedar.search.values(cc, source = "CEDARVS")
devtools::load_all(".")
cedar.search.values(cc, source = "CEDARVS")
devtools::load_all(".")
cedar.search.values(cc, source = "CEDARVS")
getMethods(cedar.search.values)
getMethods("cedar.search.values")
?getMethods
showMethods("cedar.search.values")
showMethods("cedar.search.values", showEmpty = TRUE)
showMethods("cedar.search.values")
.S4methods("cedar.search.values")
.S4methods("cedar.search.values")
showMethods("cedar.search.values")
cedar.search.values(cc)
devtools::load_all(".")
showMethods("cedar.search.ontologies")
showMethods("cedar.search.values")
?signature
signature(test = c("numeric", "character"))
?dplyr::select
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
traceback()
devtools::load_all(".")
devtools::load_all(".")
showMethods("cedar.search.values")
help("cedar.search.values")
devtools::load_all(".")
my
1:3 == 2
4:6[1:3 == 2]
(4:6)[1:3 == 2]
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
readline()
devtools::load_all(".")
devtools::load_all(".")
switch(NA,
NA = 1)
switch(NA,
`NA` = 1)
switch(NA,
`NA` = 1,
2)
switch(
NA,
`NA` = 1,
2)
a = NA
switch (a,
NA = 1
)
switch (a,
`NA` = 1
)
switch (a,
`NA` = 1,
2
)
switch (a,
`NA` = print(1),
print(2)
)
a
switch (a,
`NA` = print(1),
print(2)
)
?switch
rm(a)
identical(NA, NA_character_)
?assign
ls()
my.api.key <- "8fe5be450c83f1db53a91fe97b64cb87bff3e46aa382e658a3c85fe32cf3c5bc"
get("my.api.key")
==
`==`
.Primitive("==")
?.Primitive("==")
(function(x = c(1,2)) print(get("x")))()
?search
?query
?cedarr::query
devtools::load_all(".")
?query
paste0("/", "rer", NULL, collapse = "/")
paste0("/", "rer", "NULL", collapse = "/")
paste0("", "rer", NULL, sep = "/")
paste0(c("/", "rer", "NULL"), collapse = "/")
paste0(c("/", "rer", NULL), collapse = "/")
paste0(c("", "rer", NULL), collapse = "/")
as.integer(0.1)
try(as.integer(0.1))
devtools::load_all(".")
devtools::load_all(".")
cedarr::search(my.api.key, "habitat")
TRUE || FALSE
devtools::load_all(".")
cedarr::search(my.api.key, "habitat")
subtree.root.id
(!is.character(subtree.root.id) && !is.na(subtree.root.id)) ||
!grepl("^http", subtree.root.id)
is.character(subtree.root.id)
is.na(subtree.root.id)
(!is.character(subtree.root.id) && !is.na(subtree.root.id))
devtools::load_all(".")
cedarr::search(my.api.key, "habitat")
devtools::load_all(".")
cedarr::search(my.api.key, "habitat")
devtools::load_all(".")
cedarr::search(my.api.key, "habitat")
test <- cedarr::search(my.api.key, "habitat")
View(test)
typeof(test)
usethis::use_test()
?testthat::expect
vignette("custom-expectation")
cedarr::search(my.api.key, "habitat")
test <- cedarr::search(my.api.key, "habitat", output.mode = "full")
test$status_code
get("my.api.key", envir = .GlobalEnv)
quote("ENVO")
quote(ENVO)
deparse("ENVO")
testthat::auto_test()
testthat::auto_test("./R")
testthat::auto_test("./R", "./tests/")
cedarr::search(
my.api.key,
"habitat",
output.mode = "full"
)$status_code
