vs.collection = "CEDARVS",
id = "http://www.semanticweb.org/jgraybeal/ontologies/2015/7/cedarvaluesets#Study_File_Type"
)
result
ls()
url
api.key
output.mode
...
GET(
url,
add_headers(Authorization = paste("apiKey", api.key))
)
GET(
url,
...,
add_headers(Authorization = paste("apiKey", api.key))
)
result <- GET(
url,
...,
add_headers(Authorization = paste("apiKey", api.key))
)
result
result$status_code
result <- cedarr::accessValueSets(
my.api.key,
vs.collection = "CEDARVS",
id = "http://www.semanticweb.org/jgraybeal/ontologies/2015/7/cedarvaluesets#Study_File_Type"
)
result
url
match.call
match.call()
ls()
sapply(ls(), get)
sapply(ls(), get, envir = environment())
?GET
devtools::load_all(".")
result <- cedarr::accessValueSets(
my.api.key,
vs.collection = "CEDARVS",
id = "http://www.semanticweb.org/jgraybeal/ontologies/2015/7/cedarvaluesets#Study_File_Type"
)
is.null(id) || isTRUE(!is.null(id) && sub == "values")
cedar.get(
api.key,
paste0(
"https://terminology.metadatacenter.org/bioportal/vs-collections/",
vs.collection,
"/value-sets",
id
),
output.mode = output.mode
)
cedar.get(
api.key,
paste0(
"https://terminology.metadatacenter.org/bioportal/vs-collections/",
vs.collection,
"/value-sets",
id
),
output.mode = output.mode
)
result
GET(
url,
...,
add_headers(Authorization = paste("apiKey", api.key))
)
isFALSE(is.character(output.mode) && output.mode %in% c("full","content"))
devtools::load_all(".")
devtools::load_all(".")
result <- cedarr::accessValueSets(
my.api.key,
vs.collection = "CEDARVS",
id = "http://www.semanticweb.org/jgraybeal/ontologies/2015/7/cedarvaluesets#Study_File_Type"
)
devtools::load_all(".")
?listValueSets
result <- cedarr::listValueSets(
my.api.key,
)
result
names(result)
unique(resu)
unique(result$@id)
unique(result$`@id`)
names(result)
devtools::load_all(".")
?cedarr:search
?cedarr:search
?cedarr::search
result <- cedarr::query(
my.api.key,
"habitat",
"ENVO"
)
result <- cedarr::search(
my.api.key,
"habitat",
"ENVO"
)
page
devtools::load_all(".")
result <- cedarr::search(
my.api.key,
"habitat",
"ENVO"
)
?page
?accessClasses
?accessClass
result <- cedarr::accessClass(
my.api.key,
"ENVO",
"http://purl.obolibrary.org/obo/ENVO_01000739", sub = "tree"
)
devtools::load_all(".")
result <- cedarr::accessClass(
my.api.key,
"ENVO",
"http://purl.obolibrary.org/obo/ENVO_01000739", sub = "tree"
)
View(result)
result <- cedarr::accessClass(
my.api.key,
"ENVO",
"http://purl.obolibrary.org/obo/ENVO_01000739", sub = "descendants"
)
View(result)
result <- cedarr::accessClass(
my.api.key,
"ENVO",
"http://purl.obolibrary.org/obo/ENVO_01000739", sub = "children"
)
View(result)
result <- cedarr::accessClass(
my.api.key,
"ENVO",
"http://purl.obolibrary.org/obo/ENVO_01000817"
)
View(result)
result <- cedarr::accessClass(
my.api.key,
"ENVO",
"http://purl.obolibrary.org/obo/ENVO_01000817",
sub = "tree"
)
View(result)
result <- cedarr::accessClass(
my.api.key,
"ENVO",
"http://purl.obolibrary.org/obo/ENVO_01000817",
sub = "children"
)
View(result)
# Fetch 'biome' class in ENVO
result <- cedarr::accessClass(
my.api.key,
"ENVO",
"http://purl.obolibrary.org/obo/ENVO_00000428"
)
View(result)
# Fetch 'biome' class in ENVO
result <- cedarr::accessClass(
my.api.key,
"ENVO",
"http://purl.obolibrary.org/obo/ENVO_00000428",
sub = "tree"
)
View(result)
# Fetch 'biome' class in ENVO
result <- cedarr::accessClass(
my.api.key,
"ENVO",
"http://purl.obolibrary.org/obo/ENVO_00000428",
sub = "children"
)
View(result)
# Fetch 'biome' class in ENVO
result <- cedarr::accessClass(
my.api.key,
"ENVO",
"http://purl.obolibrary.org/obo/ENVO_00000428",
sub = "descendants"
)
View(result)
result[["collection"]][["hasChildren"]]
?accessProvisional()
result <- cedarr::accessProvisional(
my.api.key,
"ENVO"
)
result <- cedarr::accessProvisional(
my.api.key,
"ENVO"
)
result <- cedarr::accessProvisional(
my.api.key,
"ENVO"
)
devtools::load_all(".")
devtools::load_all(".")
result <- cedarr::accessProvisional(
my.api.key,
"ENVO"
)
devtools::load_all(".")
result <- cedarr::accessProvisional(
my.api.key,
"ENVO"
)
devtools::load_all(".")
result <- cedarr::accessProvisional(
my.api.key,
"ENVO"
)
View(result)
result <- cedarr::accessProvisional(
my.api.key,
"ENVO"
)
View(result)
?cedarr::search
?`API response`
?api-response
?`api-response`
result
names(result)
names(result$collection)
result <- cedarr::search(
my.api.key,
"habitat",
"ENVO"
)
names(result$collection)
?accessOntology
?cedarr::accessOntology
devtools::load_all(".")
?cedarr::accessOntology
warnings()
result <- cedarr::accessOntology(
my.api.key,
"ENVO",
item = "classes",
sub = "roots"
)
View(result)
my.api.key
my.api.key <- "8fe5be450c83f1db53a91fe97b64cb87bff3e46aa382e658a3c85fe32cf3c5bc"
result <- cedarr::accessOntology(
my.api.key,
"ENVO",
item = "classes",
sub = "roots"
)
View(result)
result <- cedarr::accessOntology(
my.api.key,
"ENVO",
item = "classes",
sub = "roots"
)
View(result)
devtools::load_all(".")
result <- cedarr::accessOntology(
my.api.key,
"ENVO",
item = "classes",
sub = "roots"
)
View(result)
devtools::load_all(".")
result <- cedarr::accessOntology(
my.api.key,
"ENVO",
item = "classes",
sub = "roots"
)
View(result)
result <- cedarr::accessOntology(
my.api.key,
"ENVO"
)
View(result)
?accessValueSets
result <- cedarr::accessValueSets(
my.api.key,
vs.collection = "CEDARVS",
id = "http://www.semanticweb.org/jgraybeal/ontologies/2015/7/cedarvaluesets#Study_File_Type"
)
?listValueSets
result <- cedarr::listValueSets(
my.api.key
)
View(result)
?listValueSets
?accessProperty
result2 <- cedarr::accessProperty(
my.api.key,
"ENVO",
id = "http://purl.obolibrary.org/obo/IAO_0000118",
sub = "parents"
)
result1 <- cedarr::accessProperty(
my.api.key,
"ENVO",
id = "roots",
sub = "smurf" # ignored
)
devtools::load_all(".")
source('~/Softwares/Gits/cedarr/R/utils.R')
devtools::load_all(".")
devtools::install_github("earnaud/cedarr")
devtools::load_all(".")
devtools::load_all(".")
devtools::check_failures()
devtools::check_failures(".")
devtools::package_info(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::install_github("earnaud/cedarr")
devtools::install_github("earnaud/cedarr")
devtools::load_all(".")
devtools::install_github("earnaud/cedarr")
?`api-response`
?`api-response`
devtools::load_all(".")
devtools::install_github("earnaud/cedarr")
devtools::install_github("earnaud/cedarr")
devtools::load_all(".")
devtools::build()
devtools::install_local("../cedarr_0.0.0.9000.tar.gz")
devtools::unload("cedarr")
devtools::build()
devtools::install_local("../cedarr_0.0.0.9000.tar.gz")
remove.packages("cedarr")
devtools::install_local("../cedarr_0.0.0.9000.tar.gz")
remove.packages("cedarr")
devtools::loaded_packages()
devtools::build()
devtools::install_local("../cedarr_0.0.0.9000.tar.gz")
cedarr::
library(cedarr)
remove.packages("cedarr")
devtools::install_github("earnaud/cedarr")
devtools::package_info("cedarr")
devtools::dev_sitrep()
devtools::load_all(".")
remove.packages("cedarr")
devtools::install_github("earnaud/cedarr")
?cedarr::search
mytest <- function(a, b = NA){
message(a)
message(b)
}
mytest("a")
mytest <- function(a, b = NA_character_){
message(a)
message(is.character(b) || is.na(b))
}
mytest("a")
?accessProperty
usethis::use_mit_license()
usethis::use_mit_license(name = "Whetzel PL; Noy NF; Shah NH; Alexander PR; Nyulas C; Tudorache T; Musen MA; Arnaud E; PNDB")
usethis::use_mit_license(name = "Whetzel PL; Noy NF; Shah NH; Alexander PR; Nyulas C; Tudorache T; Musen MA; Arnaud E")
usethis::use_mit_license(name = "Whetzel PL (BioPortal); Noy NF (BioPortal); Shah NH (BioPortal); Alexander PR (BioPortal); Nyulas C (BioPortal); Tudorache T (BioPortal); Musen MA (BioPortal); Arnaud E (PNDB)")
devtools::uses_testthat()
as.environment("package:cedarr")
devtools::load_all()
as.environment("package:cedarr")
ls(as.environment("package:cedarr"))
cat(ls(as.environment("package:cedarr")), sep = "\n")
paste0("test_", ls(as.environment("package:cedarr")))
sapply(paste0("tests/testthat/test_", ls(as.environment("package:cedarr")), ".R"), file.create)
cedarr::add_headers
?testthat::context
devtools::document()
"R/accessClass.R" %>% sinew::makeImport
sinew::makeImport("R/accessClass.R")
roxygen2::roxygenise()
ls(as.environment("package:sinew"))
library(sinew)
ls(as.environment("package:sinew"))
makeImport(cedarr::accessClass())
makeImport(cedarr::accessClass)
makeImport(cedarr::accessClass, print = TRUE)
makeImport(accessOntology)
makeImport(accessOntology, desc_loc = "DESCRIPTION")
list(markdown = TRUE)3
list(markdown = TRUE)
desc::desc()
str(desc::desc())
roxygen2::roxygenize()
install.packages("ArgumentCheck")
install.packages("ArgumentCheck")
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
devtools::document()
sinew::makeImport("R/accessClass.R")
sinew::makeImport("R/*")
sinew::makeImport(dir("R/"))
sinew::makeImport(dir("R/", full.names = TRUE))
roxygen2::roxygenize()
devtools::document()
devtools::load_all()
sinew("R/utils.R")
sinew("cedar.get")
sinew::makeImport("R/utils.R")
sinew::makeImport("R/utils.R")
cleanEx
base::cleanEx
devtools::load_all()
cedarr::accessOntology(api.key = "8fe5be450c83f1db53a91fe97b64cb87bff3e46aa382e658a3c85fe32cf3c5bc")
cedarr::accessOntology(api.key = "8fe5be450c83f1db53a91fe97b64cb87bff3e46aa382e658a3c85fe32cf3c5bc", "RO")
api.key <- "https://github.com/earnaud/cedarr.git"
api.key <- "8fe5be450c83f1db53a91fe97b64cb87bff3e46aa382e658a3c85fe32cf3c5bc"
devtools::load_all()
cedarr::accessOntology(api.key = "8fe5be450c83f1db53a91fe97b64cb87bff3e46aa382e658a3c85fe32cf3c5bc", "RO")
url
result
result$content
if(is.raw(result$content))
result$content <- result$content %>% rawToChar()
result$content
if(jsonlite::validate(result$content))
result$content <- result$content %>% jsonlite::fromJSON()
result$content
View(result$content)
cedarr::accessOntology(api.key = "8fe5be450c83f1db53a91fe97b64cb87bff3e46aa382e658a3c85fe32cf3c5bc", "RO")
devtools::load_all(); cedarr::accessOntology(api.key = "8fe5be450c83f1db53a91fe97b64cb87bff3e46aa382e658a3c85fe32cf3c5bc", "RO")
result
devtools::load_all(); cedarr::accessOntology(api.key = "8fe5be450c83f1db53a91fe97b64cb87bff3e46aa382e658a3c85fe32cf3c5bc", "RO")
output.mode
result$content
result
devtools::load_all(); cedarr::accessOntology(api.key = "8fe5be450c83f1db53a91fe97b64cb87bff3e46aa382e658a3c85fe32cf3c5bc", "RO")
result
devtools::load_all(); cedarr::accessOntology(api.key = "8fe5be450c83f1db53a91fe97b64cb87bff3e46aa382e658a3c85fe32cf3c5bc", "RO")
devtools::load_all()
devtools::load_all()
cedarr::accessOntology(api.key = "8fe5be450c83f1db53a91fe97b64cb87bff3e46aa382e658a3c85fe32cf3c5bc", "RO", item = "classes")
df <- cedarr::accessOntology(api.key = "8fe5be450c83f1db53a91fe97b64cb87bff3e46aa382e658a3c85fe32cf3c5bc", "RO", item = "classes")
View(df)
View(df[["collection"]])
?cedarr::accessOntology
cedarr::accessOntology(api.key = "8fe5be450c83f1db53a91fe97b64cb87bff3e46aa382e658a3c85fe32cf3c5bc")
cedarr::accessOntology(api.key = "8fe5be450c83f1db53a91fe97b64cb87bff3e46aa382e658a3c85fe32cf3c5bc", NA)
devtools::load_all()
cedarr::accessOntology(api.key = "8fe5be450c83f1db53a91fe97b64cb87bff3e46aa382e658a3c85fe32cf3c5bc", NA)
devtools::load_all()
cedarr::accessOntology(api.key = "8fe5be450c83f1db53a91fe97b64cb87bff3e46aa382e658a3c85fe32cf3c5bc", NA) %>% View
vignette("checkmate")
y = function(i) {checkmate::assert(allmissing(i))}
y()
library(checkmate)
y()
y = function(i) {assert(allMissing(i))}
y()
checkmate::check_class(NA, NA)
class(NA)
checkmate::check_class(NA, "logical")
checkClass?
?checkClass
class(NULL)
library(checkmate)
checkString("api.key", pattern = "^apiKey")
library(testthat)
library(cedarr)
test_check("cedarr")
devtools::load_all()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::load_all()
devtools::load_all()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::load_all()
library(testthat)
library(cedarr)
test_check("cedarr")
test_local()
library(testthat)
library(cedarr)
assign("my.api.key", "apiKey 8fe5be450c83f1db53a91fe97b64cb87bff3e46aa382e658a3c85fe32cf3c5bc", envir = .GlobalEnv)
test_local()
test_local()
anyMissing(c(my.api.key, "habitat"))
?anyMissing
allMissing(c(my.api.key, "habitat"))
test_local()
test_local()
test_local()
test_local()
test_local()
test_local()
test_local()
?assign
?exists
?rm
remove("my.api.key", envir = .GlobalEnv)
test_local()
library(testthat)
library(cedarr)
assign("my.api.key", "apiKey 8fe5be450c83f1db53a91fe97b64cb87bff3e46aa382e658a3c85fe32cf3c5bc", envir = .GlobalEnv)
test_local()
remove("my.api.key", envir = .GlobalEnv)
