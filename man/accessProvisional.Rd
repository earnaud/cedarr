% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getProvisionalClasses.R
\name{accessProvisional}
\alias{accessProvisional}
\title{Access Provisional Classes}
\usage{
accessProvisional(
  api.key,
  ontology,
  output.mode = "content",
  page.index = 1,
  page.size = 50
)
}
\arguments{
\item{api.key}{character. An API Key is required to access any API call. It
is used within {cedarr} as a header for http requests. An API key is linked
to a CEDAR account (https://cedar.metadatacenter.org/profile)}

\item{ontology}{character. Ontology name to display. In this context, ontology
can be set to NA: this will list all provisional classes from CEDAR.}

\item{output.mode}{character. "full" will return the whole response object
(from {httr}) or "content" will fetch the interest values from the response
object. Getting the whole object might be interesting to have a look at system
metadata, or in case of error to debug the connection. (defaults to "content")}

\item{page.size}{integer. Number of results per page, capped at 50. (defaults
to 50).}

\item{page}{integer. Index of the page to be returned (defaults to 1st page).}
}
\value{
Since this function targets classes provisionnaly available, it is expected
to get an empty result.

If \code{output.mode = "full"}, the whole http response object (see httr::response).
It is structured as a list with response metadata wrapping the \code{content} item
which contains the wanted result.

If \code{output.mode = "content"}, the \code{content} item is directly returned, containing
database metadata and the interesting information in the \code{collection} subitem.
}
\description{
Get all provisional classes in a particular ontology (including provisional
value sets and provisional values).
}
\details{
This function matches the following query from the Swagger UI
(https://terminology.metadatacenter.org/api/#/):

\itemize{
\item{\code{ontology/{ontology}/classes/provisional}}
}
}
\examples{
my.api.key <- readline()

result <- cedarr::accessProvisional(
  my.api.key,
  "ENVO"
)

View(result)

}
