% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cedar.search.R
\name{cedar.search}
\alias{cedar.search}
\alias{cedar.search,cedar.client,character,ANY,ANY,ANY,ANY-method}
\alias{cedar.search,cedar.client,ANY,ANY,ANY,ANY,ANY-method}
\alias{cedar.search,cedar.client,ANY,ANY,ANY,ANY,character-method}
\title{Search in CEDAR}
\usage{
## Generic method
cedar.search()

\S4method{cedar.search}{cedar.client,character,ANY,ANY,ANY,ANY}(
  cedar.client,
  query,
  scope = "all",
  output.mode = "content",
  ontologies = NA_character_,
  suggest = FALSE,
  page = 1,
  page.size = 50
)

\S4method{cedar.search}{cedar.client,ANY,ANY,ANY,ANY,ANY}(cedar.client, output.mode = "content")

\S4method{cedar.search}{cedar.client,ANY,ANY,ANY,ANY,character}(
  cedar.client,
  output.mode = "content",
  vs_collection = "CEDARVS",
  vs_id = NA_character_,
  page = 1,
  page.size = 50
)
}
\arguments{
\item{cedar.client}{a cedar.client for BioPortal. See cedar.client.}

\item{query}{character. Input query as a text.}

\item{scope}{character. Which search scopes shall be investigated. Accepted values are 1-length vector:
"all" (default), "classes", "value_sets", "values".}

\item{output.mode}{character. "full" will return the whole response object (from {httr}) or "content" will
fetch the interest values from the response object. Getting the whole object might be interesting to
have a look at system metadata, or in case of error to debug the connection. (defaults to "content")}

\item{ontologies}{character. IDs of ontologies to query, aka sources. (e.g. "ENVO").}

\item{vs_collection}{character. Collection name from which the target value set originates.
Accepted values are 1-length vector: "CEDARVS", "CADSR-VS", "NLMVS".}

\item{vs_id}{character. Target value set ID. (default to NA_character_).}

\item{suggest}{logical. Will perform a search specifically geared towards type-ahead suggestions
(defaults to FALSE).}

\item{page}{integer. Index of the page to be returned (defaults to 1st page).}

\item{pageSize}{integer. Number of results per page, capped at 50. (defaults to 50).}
}
\value{
A response object (see \code{\link[httr]{response}}). Its content varies accordingly to
the provided argument, thus referring to different methods. Also, if \emph{output.mode} is
set to "full", then the most interesting part is located at response/content; if
\emph{output.mode} is set to "complete", this interesting part is directly returned.

\emph{If cedar.client and query are provided:}

Response contains database pages information (page number, page
size, page count, links to next and previous pages) and a \emph{collection} list containing
the queried information in a data.frame.

\emph{If only cedar.client is provided:}

Response contains a data.frame referencing the value set collections of CEDAR
terminology metadatacenter.

\emph{If cedar.client and vs_collection are provided:}

???
}
\description{
S4 Methods to query terms, classes or retrieve full ontologies from the CEDAR terminology
metadata center. These mthods relies on simple HTTP requests wrapped into these convenience
methods.
}
\section{Methods (by class)}{
\itemize{
\item \code{cedar.client = cedar.client,query = character,scope = ANY,output.mode = ANY,ontologies = ANY,vs_collection = ANY}: Search for ontology classes, value sets, and values.

\item \code{cedar.client = cedar.client,query = ANY,scope = ANY,output.mode = ANY,ontologies = ANY,vs_collection = ANY}: Find all value set collections.

\item \code{cedar.client = cedar.client,query = ANY,scope = ANY,output.mode = ANY,ontologies = ANY,vs_collection = character}: Get all value sets in a value set collection.
}}

\examples{
# Set up a CEDAR client providing you API key
# (execute this code line by line)
my.api.key <- readline()
cc <- cedar.client(api.key = my.api.key)

## 1 - search a term in an ontology
res <- cedar.search(
  cedar.client = cc,
  query = "community",
  ontologies = "ENVO"
)

# Access the result of the query
View(res$collection)

## 2 - fetch values sets collections
res <- cedar.search(
  cedar.client = cc
)

# Access the result of the query
View(res)

## 3 - fetch values sets from a value sets collection
res <- cedar.search(
  cedar.client = cc,
  vs_collection = "CEDARVS"
)

# Access the result of the query
View(res$collection)

}
\seealso{
\code{\link[=cedar.client]{cedar.client()}}
}
